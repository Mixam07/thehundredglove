{% comment %}
  Renders cart drawer

  Usage:
  {% render 'cart-drawer' %}
{% endcomment %}

<!-- CSS -->
<!--<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@10/swiper-bundle.min.css" />-->

<!-- JS -->
<script src="https://cdn.jsdelivr.net/npm/swiper@10/swiper-bundle.min.js"></script>

<script src="{{ 'cart.js' | asset_url }}" defer="defer"></script>

<style>
  .drawer__close{
    top: 20px !important;
    right: 25px !important;
  }

  .drawer{
    display: none !important;
  }
  .drawer.active{
    display: flex !important;
  }

  .cart__checkout-button{
    background-color: #000;
    color: #fff;
    padding: 15px;
    border-radius: 0;
    font-weight: 700;
    font-family: "Arial" !important;
    margin-bottom: 10px;
  }

  .cart-1{
    width: 100%;
    margin-bottom: 20px;
  }

  .cart-2{
    display: block;
    margin: 0 auto;
    max-width: 225px;
    width: 100%;
  }

  .drawer__footer{
    margin: 0 -1.5rem;
    padding: 1.5rem !important;
    background-color: rgba(246, 246, 247, 1) !important;
  }

  .totals{
    margin: 0 -1.5rem;
    padding: 0 1.5rem 1.5rem 1.5rem;
    border-bottom: .5px solid rgba(217, 217, 217, 1);
    margin-bottom: 1.5rem;
  }

  .totals>h2{
    font-family: "Arial" !important;
    font-weight: 700;
    text-transform: none;
    font-size: 14px !important;
  }

  .totals__subtotal-value *,
  .totals__subtotal-value{
    font-size: 14px;
    font-weight: 700;
  }

  .cart-drawer .cart-item>td+td{
    padding: 10px 0 !important;
  }

  .cart-wrapper{
    padding: 15px 0;
  }

  .cart-item__image{
    background-color: #F2F2F2;
    border-radius: 5px;
  }

  .cart-item__name{
    font-size: 16px;
    font-family: "Anton" !important;
  }

  .product-option *{
    font-size: 12px;
  }

  .quantity{
    width: 75px !important;
    min-height: 30px !important;
  }

  .quantity__button{
    width: calc(75px/3) !important;
    color: rgba(196, 196, 196, 1);
    font-size: 12px;
    margin: 3px 0;
  }

  .quantity__input{
    font-size: 12px;
  }

  .quantity__button:first-child{
    border-right: .5px rgba(196, 196, 196, 1) solid;
  }

  .quantity__button:last-child{
    border-left: .5px rgba(196, 196, 196, 1) solid;
  }

  .quantity:after{
    border-radius: 5px !important;
    border: .5px rgba(196, 196, 196, 1) solid !important;
    box-shadow: none !important;
  }

  .cart-item__totals.right{
    display: flex !important;
    flex-direction: column !important;
    align-items: flex-end !important;
    justify-content: space-between !important;
  }

  .cart-drawer .price{
    font-size: 14px;
  }

  #currency{
    display: none;
  }

  .cart-element{
    display: flex;
    column-gap: 10px;
  }

  .cart-element__media{
    width: 90px;
    height: 90px;
    border-radius: 5px;
    background-color: #F2F2F2;
  }

  .cart-element__media img{
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .cart-element__details{
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .cart-element__totals,
  .cart-element__details{
    padding: 10px 0;
  }

  .cart-element__name{
    font-size: 18px;
    text-transform: uppercase;
    text-decoration: none !important;
    font-family: "Anton" !important;
  }

  .product-option{
    margin-top: -5px;
    margin-bottom: 5px;
  }

  .product-option *{
    font-size: 12px;
    color: #000;
    line-height: 14px;
  }

  .cart-wrapper{
    display: flex;
    flex-direction: column;
    row-gap: 15px;
  }

  .quantity__input{
    line-height: 30px;
  }

  .cart-element__totals{
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    justify-content: space-between;
  }

  .cart-element__totals .price{
    font-size: 14px;
  }

  .cart-remove-button{
    padding: 0;
    border: none;
    background-color: transparent;
  }

  .is-empty cart-drawer-items{
    display: none !important;
  }

  .is-empty .drawer__footer{
    display: none !important;
  }

  .drawer__inner-empty{
    display: none !important;
  }

  .is-empty .drawer__inner-empty{
    display: flex !important;
  }
  
  @media (max-width: 550px) {
    .cart-drawer{
      width: 100%;
    }

    .drawer__inner{
      width: 100% !important;
      max-width: 100% !important;
    }
  }

  .protection{
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 10px;
  }

  .protection__wrapper{
    display: flex;
    align-items: center;
    column-gap: 10px;
  }

  .protection__title{
    margin: 0;
    font-family: "Anton" !important;
    color: #000;
    text-transform: uppercase;
  }

  .protection__description{
    color: #000;
    margin: 0;
    font-size: 11px;
    line-height: 12px;
    max-width: 175px;
  }

  .protaction__wrap{
    display: flex;
    align-items: center;
    column-gap: 10px;
  }

  .protection__price{
    font-weight: 700;
    font-size: 12px;
    margin: 0;
  }

  .protection__input{
    display: none !important;
  }

  .protection__input:checked ~ .protection__checkbox{
    justify-content: end;
  }

  .protection__checkbox{
    width: 40px;
    height: 22px;
    background-color: #C5CCD6;
    border-radius: 25px;
    display: flex;
    align-items: center;
    justify-content: start;
    padding: 0 2px;
    transition: .5s all;
  }

  .protection__input:checked ~ .protection__checkbox{
    background-color: rgba(215, 85, 85, 1);
  }

  .protection__active{
    display: block;
    height: 18px;
    width: 18px;
    border-radius: 100%;
    background-color: #fff;
  }

  .gifts{
    padding: 45px 1.5rem 45px 1.5rem;
    border-bottom: .5px solid rgba(217, 217, 217, 1);
    margin-bottom: 15px;
    display: flex;
    flex-direction: column;
    align-items: center;
    row-gap: 30px;
  }

  .gifts__title{
    margin: 0;
    margin-top: -30px;
    font-size: 14px;
    color: #000;
  }

  .gifts__title span{
    font-weight: 700;
  }

  .gifts__wrapper{
    max-width: 250px;
    width: 100%;
    margin: 0 auto;
    height: 3px;
    background-color: rgba(185, 185, 185, 1);
    position: relative;
  }

  .gifts__item{
    position: absolute;
    left: 61.5%;
    bottom: 14px;
    display: flex;
    flex-direction: column;
    align-items: center;
    transform: translate(-50%, 100%);
  }

  .gifts__item:last-child{
    left: auto;
    right: 0;
    transform: translate(50%, 100%);
  }

  .gifts__wrap{
    width: 28px;
    height: 28px;
    border-radius: 100%;
    background-color: #fff;
    border: 2px solid rgba(215, 85, 85, 1);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 2px;
  }

  .gifts__price,
  .gifts__caption{
    margin: 0;
    font-size: 9px;
    line-height: 12px;
  }

  .gifts__active{
    display: block;
    height: 100%;
    width: 25%;
    background-color: rgba(215, 85, 85, 1);
  }

  .cart-wrapper{
    padding: 0 1.5rem;
  }

  cart-drawer-items{
    margin: 0 -1.5rem;
  }

  .related-products__wrappper h2{
    margin: 0;
    font-size: 18px;
    font-family: "Anton" !important;
  }

  .related-products__wrappper{
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 10px;
  }

  .related-swiper {
    margin-left: -1.5rem;
    padding: 0 1.5rem;
    display: flex;
    flex-wrap: nowrap;
    overflow: auto;
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE/Edge */
    cursor: grab;
  }

  .related-swiper::-webkit-scrollbar {
    display: none; /* Chrome, Safari, Opera */
  }

  .related-swiper.dragging {
    cursor: grabbing;
    user-select: none;
  }

  .product-card{
    display: flex;
    align-items: center;
    column-gap: 2px;
    padding: 2px 15px 2px 5px;
    border: .5px solid rgba(217, 217, 217, 1);
    min-width: 75%;
  }

  .product-card:first-child{
    border-radius: 10px 0 0 10px;
  }

  .product-card:last-child{
    border-radius: 0 10px 10px 0;
  }

  .product-card__info{
    flex: 1;
  }

  .related-products{
    padding-bottom: 15px;
    margin: 0 -1.5rem;
    border-bottom: .5px solid rgba(217, 217, 217, 1);
    padding-left: 1.5rem;
    margin-bottom: 15px;
  }

  .product-card__image{
    display: flex;
    align-items: center;
  }

  .product-card__image img{
    width: 65px;
  }

  .product-card__title{
    margin: 0;
    font-size: 12px;
  }

  .product-card__price{
    margin: 0;
  }

  .product-card__price,
  .product-card__price span{
    font-size: 10px;
    line-height: 14px;
  }

  .product-card__button{
    color: #000;
    background-color: rgba(229, 229, 229, 1);
    padding: 5px 15px;
    font-size: 10px;
    font-weight: 700;
    font-family: "Arial" !important;
    border: none;
    margin: 0;
  }

  @media (max-width: 750px) {
    .cart-element__name{
      font-size: 16px;
    }
    .drawer__header{
      padding: 1.5rem 2.5rem !important;
    }

    .drawer__close{
      top: 8px !important;
    }

    .gifts{
      row-gap: 20px;
    }

    .gifts__wrap{
      width: 26px;
      height: 26px;
    }

    .cart-element__media{
      width: 75px;
      height: 75px;
    }

    .product-option{
      font-size: 10px;
    }

    .cart-element__totals .price{
      font-size: 12px;
    }

    .cart-element__details{
      padding: 0;
    }

    .cart__checkout-button{
      font-size: 12px !important;
      padding: 10px !important;
    }

    .cart-1{
      margin-bottom: 10px;
    }

    .protection__description{
      font-size: 10px;
    }
  }
</style>

<cart-drawer class="drawer is-empty">
  <div id="CartDrawer" class="cart-drawer">
    <div id="CartDrawer-Overlay" class="cart-drawer__overlay"></div>
    <div
      class="drawer__inner"
      role="dialog"
      aria-modal="true"
      aria-label="{{ 'sections.cart.title' | t }}"
      tabindex="-1"
    >
      <div class="drawer__header">
        <h2 class="drawer__heading">YOUR KIT BAG</h2>
        <button
          class="drawer__close"
          type="button"
          onclick="this.closest('cart-drawer').close()"
          aria-label="{{ 'accessibility.close' | t }}"
        >
          {% render 'icon-close' %}
        </button>
      </div>
      <div class="drawer__inner-empty">
        <div class="cart-drawer__warnings center{% if settings.cart_drawer_collection != blank %} cart-drawer__warnings--has-collection{% endif %}">
          <div class="cart-drawer__empty-content">
            <h2 class="cart__empty-text">{{ 'sections.cart.empty' | t }}</h2>
          </div>
        </div>
      </div>
      <cart-drawer-items>
        <form
          action="{{ routes.cart_url }}"
          id="CartDrawer-Form"
          class="cart__contents cart-drawer__form"
          method="post"
        >
          <div id="CartDrawer-CartItems" class="drawer__contents js-contents">
            <div class="drawer__cart-items-wrapper">
              <div class="gifts">
                <p class="gifts__title"></p>
                <div class="gifts__wrapper">
                  <span class="gifts__active"></span>
                  <div class="gifts__item">
                    <div class="gifts__wrap">
                      <img src="{{ 'gift.svg' | asset_url }}" alt="">
                    </div>
                    <p data-gift class="gifts__price">{% if cart.currency.iso_code == "USD" %}$130.00{% else %}£80.00{% endif %}</p>
                    <p class="gifts__caption">Free Gift</p>
                  </div>
                  <div class="gifts__item">
                    <div class="gifts__wrap">
                      <img src="{{ 'gift-shipping.svg' | asset_url }}" alt="">
                    </div>
                    <p data-shippining class="gifts__price">{% if cart.currency.iso_code == "USD" %}$185.00{% else %}£130.00{% endif %}</p>
                    <p class="gifts__caption">Free Shipping</p>
                  </div>
                </div>
              </div>
              <div class="cart-wrapper" role="table"></div>
            </div>
            <p id="CartDrawer-LiveRegionText" class="visually-hidden" role="status"></p>
            <p id="CartDrawer-LineItemStatus" class="visually-hidden" aria-hidden="true" role="status">
              {{ 'accessibility.loading' | t }}
            </p>
          </div>
          <div id="CartDrawer-CartErrors" role="alert"></div>
        </form>
      </cart-drawer-items>
      <div class="drawer__footer">
        <!-- Start blocks -->
        <!-- Subtotals -->

        <section class="related-products">
          <div class="related-products__wrappper">
            <h2>GOALKEEPERS ALSO LOVE</h2>
          </div>
          <div class="related-swiper">
            {% for product in collections['related'].products %}
              <div class="product-card">
                <div class="product-card__image">
                  <img src="{{ product.featured_image | img_url: '300x' }}" alt="{{ product.title }}">
                </div>
                <div class="product-card__info">
                  <h3 class="product-card__title">{{ product.title }}</h3>
                  <p class="product-card__price">{{ product.price | money_without_trailing_zeros }}</p>
                </div>
                <div class="product-card__wrapper">
                  <button data-variantId="{{ product.variants.first.id }}" class="product-card__button">ADD</button>
                </div>
              </div>
            {% endfor %}
          </div>
        </section>

        <div class="totals" role="status">
          <h2 class="totals__subtotal">Total</h2>
          <p class="totals__subtotal-value">{{ cart.total_price | money }}</p>
        </div>

        <!-- CTAs -->
        <div class="protection">
          <div class="protection__wrapper">
            <img src="{{ 'protection.svg' | asset_url }}" alt="">
            <div class="protection__information">
              <p class="protection__title">Shipping Protection</p>
              <p class="protection__description">Protect your order from damage loss, or theft during shipping</p>
            </div>
          </div>
          <div class="protaction__wrap">
            <p class="protection__price">
              {% if cart.currency.iso_code == "USD" %}
                $4.00
              {% else %}
                £3.00
              {% endif %}
            </p>
            <label for="protection" class="protection__check">
              <input class="protection__input" id="protection" name="protection" type="checkbox">
              <div class="protection__checkbox">
                <span class="protection__active"></span>
              </div>
            </label>
          </div>
        </div>

        <div class="cart__ctas" {{ block.shopify_attributes }}>
          <noscript>
            <button type="submit" class="cart__update-button button button--secondary" form="CartDrawer-Form">
              {{ 'sections.cart.update' | t }}
            </button>
          </noscript>
          <button
            type="submit"
            id="CartDrawer-Checkout"
            class="cart__checkout-button button"
            name="checkout"
            form="CartDrawer-Form"
          >
            Proceed to Checkout | {{ cart.total_price | money | strip_html }}
          </button>
        </div>
        
        <img class="cart-1" src="{{ 'cart-1.svg' | asset_url }}" alt="">
        <img class="cart-2" src="{{ 'cart-2.svg' | asset_url }}" alt="">
      </div>
    </div>
  </div>
</cart-drawer>

<span id="currency">
  {% if cart.currency.iso_code == "USD" %}
    $
  {% elsif cart.currency.iso_code == "EUR" %}
    €
  {% else %}
    £
  {% endif %}
</span>

<script>
  const swiper = document.querySelector('.related-swiper');
  let isDown = false;
  let startX;
  let scrollLeft;

  swiper.addEventListener('mousedown', (e) => {
    isDown = true;
    swiper.classList.add('dragging');
    startX = e.clientX;
    scrollLeft = swiper.scrollLeft;
  });

  swiper.addEventListener('mouseup', () => {
    isDown = false;
    swiper.classList.remove('dragging');
  });

  swiper.addEventListener('mouseleave', () => {
    isDown = false;
    swiper.classList.remove('dragging');
  });

  swiper.addEventListener('mousemove', (e) => {
    if (!isDown) return;
    const walk = (e.clientX - startX) * 2; // Множник для швидкості прокрутки
    swiper.scrollLeft = scrollLeft - walk;
  });

  function updateCart(variantId, quantity, input) {
    fetch("/cart/change.js", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ id: variantId, quantity: quantity })
    })
    .then(res => res.json())
    .then(cart => {
      if(input) {
        input.textContent = quantity;
      }

      fetch("/cart.js")
        .then(res => res.json())
        .then(cart => {
          render(cart, true);
        });
    });
  };

  document.querySelector(".drawer").addEventListener("click", (e) => {
    if(e.target.classList.contains("cart-drawer__overlay") || e.target.closest(".drawer__close")){
      document.querySelector("body").style.overflow = "auto";
    }
  });

  async function render(cart, t) {
    const shipping = document.querySelector("[data-shippining]").textContent;
    const shippingNumber = parseFloat(shipping.slice(1)) * 100;
    const gift = document.querySelector("[data-gift]").textContent;
    const giftNumber = parseFloat(gift.slice(1)) * 100;
    
    if(cart.items.length == 0) {
      document.querySelector(".drawer").classList.add("is-empty")
    }else {
      document.querySelector(".drawer").classList.remove("is-empty")
    }

    const currency = document.querySelector("#currency").innerHTML.trim();
    const tbody = document.querySelector('.cart-wrapper');
    tbody.innerHTML = '';

    if(!t) document.querySelector("body").style.overflow = "hidden";

    cart.items.forEach((item, index) => {
      const imageUrl = item.image ? item.image.replace('.jpg', '_300x.jpg') : '';
      const aspectRatio = item.image_aspect_ratio || 1;
      const linePrice = (item.line_price / 100).toFixed(2);
      let optionsHTML = '';

      if (
        !item.product_has_only_default_variant ||
        Object.keys(item.properties || {}).length > 0 ||
        item.selling_plan_allocation
      ) {
        // Варіанти товару
        if (!item.product_has_only_default_variant && item.options_with_values) {
          item.options_with_values.forEach(option => {
            optionsHTML += `
              <div class="product-option">
                <dt>${option.name}:</dt>
                <dd>${option.value}</dd>
              </div>`;
          });
        }

        // Кастомні властивості (properties)
        for (const [key, value] of Object.entries(item.properties || {})) {
          if (value && !key.startsWith('_')) {
            optionsHTML += `
              <div class="product-option">
                <dt>${key}:</dt>
                <dd>`;
            if (value.includes('/uploads/')) {
              const fileName = value.split('/').pop();
              optionsHTML += `<a href="${value}" class="link" target="_blank">${fileName}</a>`;
            } else {
              optionsHTML += `${value}`;
            }
            optionsHTML += `</dd></div>`;
          }
        }
      }


      tbody.innerHTML += `
        <div class="cart-element" role="row">
          <div class="cart-element__media">
            ${imageUrl ? `<img class="cart-element__image" src="${imageUrl}" alt="" width="150" height="${150 / aspectRatio}">` : ''}
          </div>
          <div class="cart-element__details">
            <a href="${item.url}" class="cart-element__name h4 break">${item.product_title}</a>
            ${optionsHTML}
            ${
              (item.variant_id !== 54858935828860 && item.variant_id !== 53598862836092)?
              `<div class="cart-element__quantity-wrapper">
                <quantity-input class="quantity cart-quantity">
                  <button class="quantity__button" name="minus" data-variant-id="${item.variant_id}" type="button">-</button>
                  <div quantityVariantId="${item.variant_id}" class="quantity__input" data-index="${index + 1}">${item.quantity}</div>
                  <button class="quantity__button" name="plus" data-variant-id="${item.variant_id}" type="button">+</button>
                </quantity-input>
              </div>`: ""
            }
          </div>
          <div class="cart-element__totals right">
            <span class="price price--end">${currency}${linePrice}</span>
            <button class="cart-remove-button" data-variant-id="${item.variant_id}">
              <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" viewBox="0 0 17 17" fill="none">
                <path d="M13.8138 3.58154L2.55811 3.58155" stroke="#191B1C" stroke-width="1.36433" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M5.62793 1.53467H10.7442" stroke="#191B1C" stroke-width="1.36433" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M12.7908 3.58154V13.3024C12.7908 13.4381 12.7369 13.5682 12.6409 13.6642C12.545 13.7601 12.4148 13.814 12.2791 13.814H4.09317C3.95748 13.814 3.82734 13.7601 3.73139 13.6642C3.63545 13.5682 3.58154 13.4381 3.58154 13.3024V3.58154" stroke="#191B1C" stroke-width="1.36433" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </button>
          </div>
        </div>`;
    });

    if(localStorage.getItem("protection") == "true"){
      document.querySelector(".protection__input").checked = true;
    }else if(localStorage.getItem("protection") == "false") {
      document.querySelector(".protection__input").checked = false;
    } else {
      document.querySelector(".protection__input").checked = true;
      localStorage.setItem("protection", "true")
    }

    const price = localStorage.getItem("protection") == "true"? cart.total_price + 300: cart.total_price;
    const total = (price / 100).toFixed(2);

    document.querySelector(".totals__subtotal-value").innerHTML = `<span>${currency}${total}</span>`;
    document.querySelector("#CartDrawer-Checkout").textContent = `Proceed to Checkout | ${currency}${total}`;

    const giftElement = document.querySelector('.gifts__active');

    if (giftElement) {
      giftElement.style.width = Math.min((price / shippingNumber) * 100, 100) + '%';
      giftElement.setAttribute('data-price', price);
    }

    if(price < giftNumber){
      document.querySelector('.gifts__title').innerHTML = `You're <span>${currency}${((giftNumber - price) / 100).toFixed(2)}</span> Away From Free Gift`;
    } else if(price < shippingNumber){
      document.querySelector('.gifts__title').innerHTML = `You're <span>${currency}${((shippingNumber - price) / 100).toFixed(2)}</span> Away From Free Shipping`;
    } else {
      document.querySelector('.gifts__title').innerHTML = `Nice! You've Also Unlocked Free Shipping 🙌`;
    }
 
    const hasGiftItem = cart.items.some(item => item.variant_id === 54858935828860);

    if(price >= giftNumber){
      if (!hasGiftItem) {
        // Додаємо подарунок через запит до Shopify API або cart.js (якщо використовується)
        const response = await fetch("/cart/add.js", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            items: [{ id: 54858935828860, quantity: 1 }]
          })
        });

        if (response.ok) {
          const result = await response.json();
          console.log("Item added:", result);

          // Отримуємо оновлений кошик і перерендерюємо без перезавантаження
          const cartResponse = await fetch("/cart.js");
          const cart = await cartResponse.json();
          render(cart, true);
        } else {
          const errorData = await response.json();
          console.error("Add to cart failed:", errorData);
        }
      }
    } else {
      if (hasGiftItem) {
        updateCart("54858935828860", 0)
      }
    }

    const productQuantities = {};

    cart.items.forEach(item => {
      const id = item.product_id;
      if (!productQuantities[id]) {
        productQuantities[id] = 0;
      }
      productQuantities[id] += item.quantity;
    });

    // Перевірка, чи є хоч один продукт, якого 3 або більше одиниць (навіть з різними варіантами)
    const hasThreeOfSameProduct = Object.values(productQuantities).some(qty => qty >= 3);

    const hasGiftItemSecond = cart.items.some(item => item.variant_id === 53598862836092);

    if(!hasGiftItemSecond && hasThreeOfSameProduct){
      // Додаємо подарунок через запит до Shopify API або cart.js (якщо використовується)
      const response = await fetch("/cart/add.js", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          items: [{ id: 53598862836092, quantity: 1 }]
        })
      });

      if (response.ok) {
        const result = await response.json();
        console.log("Item added:", result);

        // Отримуємо оновлений кошик і перерендерюємо без перезавантаження
        const cartResponse = await fetch("/cart.js");
        const cart = await cartResponse.json();
        render(cart, true);
      } else {
        const errorData = await response.json();
        console.error("Add to cart failed:", errorData);
      }
    } else if(!hasThreeOfSameProduct && hasGiftItemSecond){
      updateCart("53598862836092", 0);
    }
  }

  document.querySelectorAll("[data-variantId]").forEach(btn => {
    btn.addEventListener("click", async (e) => {
      const id = btn.getAttribute("data-variantId");

      const formData = {
          items: [
              { id: id, quantity: 1 },
          ]
      }

      try{
          const response = await fetch("/cart/add.js", {
              method: "POST",
              headers: {
                  "Content-Type": "application/json"
              },
              body: JSON.stringify(formData)
          });

          if (response.ok) {
              const result = await response.json();
              console.log(result);
              
              fetch("/cart.js")
              .then(res => res.json())
              .then(cart => {
                  render(cart);
              });
          } else {
              console.error(response.error, response);
          }
      }catch(e) {
          console.error(e);
      }
    });
  });

  document.addEventListener('DOMContentLoaded', function () {
    function isIE() {
      const ua = window.navigator.userAgent;
      const msie = ua.indexOf('MSIE ');
      const trident = ua.indexOf('Trident/');

      return msie > 0 || trident > 0;
    }

    if (!isIE()) return;
    const cartSubmitInput = document.createElement('input');
    cartSubmitInput.setAttribute('name', 'checkout');
    cartSubmitInput.setAttribute('type', 'hidden');
    document.querySelector('#cart').appendChild(cartSubmitInput);
    document.querySelector('#checkout').addEventListener('click', function (event) {
      document.querySelector('#cart').submit();
    });
  });

  function checkedItems(cart) {
    const variantIdsToRemove = [43898975584512]; //, 54858935828860
    const removePromises = [];

    variantIdsToRemove.forEach(variantId => {
      const foundItem = cart.items.find(item => item.variant_id === variantId);
      if (foundItem) {
        const removePromise = fetch("/cart/change.js", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            id: variantId.toString(),
            quantity: 0
          })
        });
        removePromises.push(removePromise);
      }
    });

    // Після видалення всіх знайдених варіантів — оновлюємо кошик
    Promise.all(removePromises).then(() => {
      fetch("/cart.js")
        .then(res => res.json())
        .then(updatedCart => {
          render(updatedCart, true);
        });
    });

    return removePromises
  }

  document.addEventListener('DOMContentLoaded', function () {
    fetch("/cart.js")
      .then(res => res.json())
      .then(async cart => {
        const removePromises = await checkedItems(cart);

        // Якщо нічого не знайшли — просто рендеримо
        if (removePromises.length === 0) {
          render(cart, true);
        }
      });

    document.querySelector('.cart-wrapper').addEventListener('click', function (e) {
      const quantityButton = e.target.closest('.quantity__button');
      if (quantityButton) {
        const input = quantityButton.closest(".quantity").querySelector(".quantity__input");
        const variantId = input.getAttribute("quantityVariantId");
        const step = 1;
        const min = 1;
        const max = 9999;
        let quantity = +input.textContent.trim();

        if (quantityButton.name === "plus") quantity = Math.min(quantity + step, max);
        if (quantityButton.name === "minus") quantity = Math.max(quantity - step, min);

        updateCart(variantId, quantity, input);
        return;
      }

      const removeButton = e.target.closest('.cart-remove-button');
      if (removeButton) {
        e.preventDefault();
        const variantId = removeButton.getAttribute("data-variant-id");
        updateCart(variantId, 0, null);
        return;
      }
    });

    document.querySelector("#cart-icon-bubble").addEventListener("click", (e) => {
      document.querySelector("body").style.overflow = "hidden";
    });

    document.querySelector(".protection__input").addEventListener("input", (e) => {
      localStorage.setItem("protection", e.target.checked);
      fetch("/cart.js")
      .then(res => res.json())
      .then(cart => {
        render(cart, false);
      });
    });

    document.querySelector(".cart__checkout-button").addEventListener("click", async (e) => {
      const price = +document.querySelector("[data-price]")?.getAttribute("data-price");

      const formData = {
          items: [{
              id: "43898975584512",
              quantity: localStorage.getItem("protection") == "true"? 1: 0
          }/*,{
              id: "54858935828860",
              quantity: price >= 8000? 1: 0
          }*/]
      };

      try {
          const response = await fetch("/cart/add.js", {
              method: "POST",
              headers: {
                  "Content-Type": "application/json"
              },
              body: JSON.stringify(formData)
          });
      } catch (error) {
          console.error(error);
      }
    });
  });
</script>
